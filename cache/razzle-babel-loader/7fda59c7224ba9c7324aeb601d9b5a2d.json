{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { urlWeather, urlForecast } from \"../lib/initial-data\";\nexport const fetchWeather = path => async city => {\n  const response = await fetch(path(city));\n  const result = await response.json();\n  return result;\n};\nexport const fetchCityWeather = createAsyncThunk(\"cityWeather/fetchCityWeather\", fetchWeather(urlWeather));\nexport const fetchCityForecast = createAsyncThunk(\"cityWeather/fetchCityForecast\", fetchWeather(urlForecast));\nexport const cityWeather = createSlice({\n  name: \"cityWeather\",\n  initialState: {},\n  reducers: {\n    cityLoaded: (_, action) => action.payload\n  },\n  extraReducers: {\n    [fetchCityWeather.fulfilled]: (_, action) => action.payload\n  }\n});\nexport const cityForecast = createSlice({\n  name: \"cityForecast\",\n  initialState: {},\n  reducers: {\n    cityLoaded: (_, action) => action.payload\n  },\n  extraReducers: {\n    [fetchCityForecast.fulfilled]: (_, action) => action.payload\n  }\n});\nexport const {\n  cityWeatherLoaded\n} = cityWeather.actions;\nexport const {\n  cityForecastLoaded\n} = cityForecast.actions;\nexport const cityWeatherReducer = cityWeather.reducer;\nexport const cityForecastReducer = cityForecast.reducer;","map":{"version":3,"sources":["/Users/t.cherednichenko/tatinacher/sunny-day-razzle/src/features/city.js"],"names":["createAsyncThunk","createSlice","urlWeather","urlForecast","fetchWeather","path","city","response","fetch","result","json","fetchCityWeather","fetchCityForecast","cityWeather","name","initialState","reducers","cityLoaded","_","action","payload","extraReducers","fulfilled","cityForecast","cityWeatherLoaded","actions","cityForecastLoaded","cityWeatherReducer","reducer","cityForecastReducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,qBAAxC;AAEA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU,MAAOC,IAAP,IAAgB;AACpD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACH,IAAI,CAACC,IAAD,CAAL,CAA5B;AACA,QAAMG,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAArB;AACA,SAAOD,MAAP;AACD,CAJM;AAMP,OAAO,MAAME,gBAAgB,GAAGX,gBAAgB,CAC9C,8BAD8C,EAE9CI,YAAY,CAACF,UAAD,CAFkC,CAAzC;AAKP,OAAO,MAAMU,iBAAiB,GAAGZ,gBAAgB,CAC/C,+BAD+C,EAE/CI,YAAY,CAACD,WAAD,CAFmC,CAA1C;AAKP,OAAO,MAAMU,WAAW,GAAGZ,WAAW,CAAC;AACrCa,EAAAA,IAAI,EAAE,aAD+B;AAErCC,EAAAA,YAAY,EAAE,EAFuB;AAGrCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC;AAD1B,GAH2B;AAMrCC,EAAAA,aAAa,EAAE;AACb,KAACV,gBAAgB,CAACW,SAAlB,GAA8B,CAACJ,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC;AADvC;AANsB,CAAD,CAA/B;AAWP,OAAO,MAAMG,YAAY,GAAGtB,WAAW,CAAC;AACtCa,EAAAA,IAAI,EAAE,cADgC;AAEtCC,EAAAA,YAAY,EAAE,EAFwB;AAGtCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,UAAU,EAAE,CAACC,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC;AAD1B,GAH4B;AAMtCC,EAAAA,aAAa,EAAE;AACb,KAACT,iBAAiB,CAACU,SAAnB,GAA+B,CAACJ,CAAD,EAAIC,MAAJ,KAAeA,MAAM,CAACC;AADxC;AANuB,CAAD,CAAhC;AAWP,OAAO,MAAM;AAAEI,EAAAA;AAAF,IAAwBX,WAAW,CAACY,OAA1C;AACP,OAAO,MAAM;AAAEC,EAAAA;AAAF,IAAyBH,YAAY,CAACE,OAA5C;AAEP,OAAO,MAAME,kBAAkB,GAAGd,WAAW,CAACe,OAAvC;AACP,OAAO,MAAMC,mBAAmB,GAAGN,YAAY,CAACK,OAAzC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { urlWeather, urlForecast } from \"../lib/initial-data\";\n\nexport const fetchWeather = (path) => async (city) => {\n  const response = await fetch(path(city));\n  const result = await response.json();\n  return result;\n};\n\nexport const fetchCityWeather = createAsyncThunk(\n  \"cityWeather/fetchCityWeather\",\n  fetchWeather(urlWeather)\n);\n\nexport const fetchCityForecast = createAsyncThunk(\n  \"cityWeather/fetchCityForecast\",\n  fetchWeather(urlForecast)\n);\n\nexport const cityWeather = createSlice({\n  name: \"cityWeather\",\n  initialState: {},\n  reducers: {\n    cityLoaded: (_, action) => action.payload,\n  },\n  extraReducers: {\n    [fetchCityWeather.fulfilled]: (_, action) => action.payload,\n  },\n});\n\nexport const cityForecast = createSlice({\n  name: \"cityForecast\",\n  initialState: {},\n  reducers: {\n    cityLoaded: (_, action) => action.payload,\n  },\n  extraReducers: {\n    [fetchCityForecast.fulfilled]: (_, action) => action.payload,\n  },\n});\n\nexport const { cityWeatherLoaded } = cityWeather.actions;\nexport const { cityForecastLoaded } = cityForecast.actions;\n\nexport const cityWeatherReducer = cityWeather.reducer;\nexport const cityForecastReducer = cityForecast.reducer;\n"]},"metadata":{},"sourceType":"module"}